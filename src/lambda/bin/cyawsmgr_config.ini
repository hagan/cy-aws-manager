# This is a TOML document
[general]
title = "TOML config for our cy-awsmgr lambda precursor stack"
debug = false

[names]
s3_bucket_name = 'cy-awsmgr-bucket'
lambda_fun_name = 'SaveDateTimeToS3'
lambda_assume_role_name = 'cy-awsmgr-lambda-ex'
lambda_bucket_pol_name = 'cy-awsmgr-bucket-policy'
lambda_log_pol_name = 'cy-awsmgr-log-policy'
api_gateway_name = 'cy-awsmgr-gateway'
deadman_uri_path = 'deadman'
apigateway_lambda_invoke_statement_id = 'apigateway-lambda-invoke'
apigateway_stage = 'dev'

[json_documents]
lambda_assume_role_policy_doc = """
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "Service": "lambda.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
        }
    ]
}
"""

cy_awsmgr_bucket_policy_doc = """
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "s3:GetObject",
        "s3:PutObject"
      ],
      "Resource": "arn:aws:s3:::{{ names.s3_bucket_name }}/*"
    }
  ]
}
"""

cy_awsmgr_loggroup_policy_doc = """
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "arn:aws:logs:*:*:*"
    }
  ]
}
"""

[paths]
tmp_dir = "{{ HOME }}/tmp"
lambda_dir = "{{ PRJ_ROOT_DIR }}/src/lambda"
lambda_func_dir = "{{ paths.lambda_dir }}/src"
lambda_func = "lambda_function.py"

[account_setup]
get_account_id = { cmdline = [ "aws", "sts", "get-caller-identity" ], capture = [ { dest = 'computed.account_id', query = 'Account' } ] }

[lambda_setup]
get_lambda_assume_role_01 = {cmdline = ["aws", "iam", "get-role", "--role-name", "{{ names.lambda_assume_role_name }}"], capture = [ { dest = 'computed.role_name', query = 'Role.RoleName'} ]}
create_lambda_assume_role_02 = {cmdline = ["aws", "iam", "create-role", "--role-name", "{{ names.lambda_assume_role_name }}", "--assume-role-policy-document", """{% computed.iam_assume_role_policy_doc_string %}"""], capture = []}
update_lambda_assume_role_02b = {cmdline = ["aws", "iam", "update-assume-role-policy", "--role-name", "{{ names.lambda_assume_role_name }}", "--policy-document", """{% computed.iam_assume_role_policy_doc_string %}"""], capture = []}
get_s3_bucket_03 = {cmdline = ["aws", "s3api", "head-bucket", "--bucket", "{{ names.s3_bucket_name }}"], capture = []}
create_s3_bucket_04 = {cmdline = ["aws", "s3", "mb", "'s3://{{ names.s3_bucket_name }}'"], capture = []}
get_lambda_func_05 = {cmdline = [ "aws", "lambda", "get-function", "--function-name", "{{ names.lambda_fun_name }}" ], capture = [ { dest = 'computed.lambda_name', query = 'Configuration.FunctionName'} ]}
create_lambda_func_06 = {cmdline = ["aws", "lambda", "create-function", "--function-name", "{{ names.lambda_fun_name }}", "--zip-file", "fileb://{{ paths.tmp_dir }}/function.zip", "--handler", "lambda_function.lambda_handler", "--runtime", "python3.11", "--role", "arn:aws:iam::{% computed.account_id %}:role/{{ names.lambda_assume_role_name }}"], capture = [{ dest = 'computed.lambda_name', query = 'FunctionName'}]}
update_lambda_func_06b = {cmdline = ["aws", "lambda", "update-function-code", "--function-name", "{{ names.lambda_fun_name }}", "--zip-file", "fileb://{{ paths.tmp_dir }}/function.zip"], capture = [{ dest = 'computed.lambda_name', query = 'FunctionName'}]}
update_lambda_func_cfg_06c = {cmdline = ["aws", "lambda", "update-function-configuration", "--function-name", "{{ names.lambda_fun_name }}", "--role", "arn:aws:iam::{% computed.account_id %}:role/{{ names.lambda_assume_role_name }}"], capture = [{ dest = 'computed.lambda_name', query = 'FunctionName'}]}
## S3
query_lambda_iam_policy_06d = {cmdline = ["aws", "iam", "list-policies", "--scope", "Local", "--query", """"Policies[?PolicyName=='{{ names.lambda_bucket_pol_name }}']" """], capture = [ {dest = 'computed.policy_s3_name', query = "[?PolicyName=='{{ names.lambda_bucket_pol_name }}']|[0].PolicyName"}, {dest = 'computed.policy_s3_id', query = "[?PolicyName=='{{ names.lambda_bucket_pol_name }}']|[0].PolicyId"}, {dest = 'computed.policy_s3_arn', query = "[?PolicyName=='{{ names.lambda_bucket_pol_name }}']|[0].Arn"}]}
create_lambda_iam_policy_06e = {cmdline = ["aws", "iam", "create-policy", "--policy-name", "{{ names.lambda_bucket_pol_name }}", "--policy-document", """{% computed.iam_bucket_policy_doc_string %}"""], capture = [{dest = 'computed.policy_s3_name', query = "Policy.PolicyName"}, {dest = 'computed.policy_s3_id', query = 'Policy.PolicyId'}, {dest = 'computed.policy_s3_arn', query = 'Policy.Arn'}]}
## LOG
query_lambda_iam_policy_06f = {cmdline = ["aws", "iam", "list-policies", "--scope", "Local", "--query", """"Policies[?PolicyName=='{{ names.lambda_log_pol_name }}']" """], capture = [ {dest = 'computed.policy_log_name', query = "[?PolicyName=='{{ names.lambda_log_pol_name }}']|[0].PolicyName"}, {dest = 'computed.policy_log_id', query = "[?PolicyName=='{{ names.lambda_log_pol_name }}']|[0].PolicyId"}, {dest = 'computed.policy_log_arn', query = "[?PolicyName=='{{ names.lambda_log_pol_name }}']|[0].Arn"}]}
create_lambda_iam_policy_06g = {cmdline = ["aws", "iam", "create-policy", "--policy-name", "{{ names.lambda_log_pol_name }}", "--policy-document", """{% computed.iam_logging_policy_doc_string %}"""], capture = [{dest = 'computed.policy_log_name', query = "Policy.PolicyName"}, {dest = 'computed.policy_log_id', query = 'Policy.PolicyId'}, {dest = 'computed.policy_log_arn', query = 'Policy.Arn'}]}

list_lambda_attached_policies = {cmdline = ["aws", "iam", "list-attached-role-policies", "--role-name", "{{ names.lambda_assume_role_name }}"], capture = [{dest = 'computed.attached_polices', query = "AttachedPolicies"}]}

# list_lambda_attached_policy_7a = {cmdline = ["aws", "iam", "list-attached-role-policies", "--role-name", "{{ names.lambda_assume_role_name }}"], capture = [ {dest = 'computed.policy_s3_name', query = "AttachedPolicies[?PolicyName=='{{ names.lambda_bucket_pol_name }}']|[0].PolicyName"}, {dest = 'computed.policy_s3_arn', query = "AttachedPolicies[?PolicyName=='{{ names.lambda_bucket_pol_name }}']|[0].PolicyArn"}]}
attach_iam_lambda_role_policy_7a = {cmdline = ["aws", "iam", "attach-role-policy", "--role-name", "{{ names.lambda_assume_role_name }}", "--policy-arn", "{% computed.policy_s3_arn %}"], capture = []}

# list_lambda_attached_policy_7c = {cmdline = ["aws", "iam", "list-attached-role-policies", "--role-name", "{{ names.lambda_assume_role_name }}"], capture = [ {dest = 'computed.policy_log_name', query = "AttachedPolicies[?PolicyName=='{{ names.lambda_log_pol_name }}']|[0].PolicyName"}, {dest = 'computed.policy_log_arn', query = "AttachedPolicies[?PolicyName=='{{ names.lambda_log_pol_name }}']|[0].PolicyArn"}]}
attach_iam_lambda_role_policy_7b = {cmdline = ["aws", "iam", "attach-role-policy", "--role-name", "{{ names.lambda_assume_role_name }}", "--policy-arn", "{% computed.policy_log_arn %}"], capture = []}
get_lambda_arn_01 = {cmdline = ["aws", "lambda", "list-functions", "--query", """"Functions[?FunctionName=='{{ names.lambda_fun_name }}'].FunctionArn" """], capture = [{ dest = 'computed.returned', query = ''}]}

[gateway_setup]
check_gateway_00 = {cmdline = [ "aws", "apigateway", "get-rest-apis", "--query", """"items[?name=='{{ names.api_gateway_name }}']" """], capture = [ { dest = 'computed.rest_api_gateways', query = '' } ] }
create_gateway_01 = {cmdline = [ 'aws', 'apigateway', 'create-rest-api', '--name', "{{ names.api_gateway_name }}", "--description", "'API for AWSMGR Lambda Function'" ], capture = [ { dest = 'computed.rest_api_gateway', query = '' }, ]}
get_resource_id_02 = {cmdline = [ "aws", "apigateway", "get-resources", "--rest-api-id", "{% computed.rest_api_id %}" ], capture = [ { dest = 'computed.returned', query = "" } ]} #items[?path == '/'].id | [0]
# , capture = [ dest = 'computed.root_resource_id', query = "items[?path == '/'] | [0]"]
# list_resource_03a = {cmdline = [ "aws", "apigateway", "get-resources", "--rest-api-id", "{% computed.rest_api_id %}" ], capture = [ { dest = 'computed.resource_id', query = "items[?parentId == '{% computed.gw_root_id %}' && pathPart == '{{ names.deadman_uri_path }}'].id | [0]" } ]}
create_resource_03 = {cmdline = ["aws", "apigateway", "create-resource", "--rest-api-id", "{% computed.rest_api_id %}", "--parent-id", "{% computed.gw_root_id %}", "--path-part", "{{ names.deadman_uri_path }}"], capture = [ { dest = 'computed.returned', query = ""}]} #items[?parentId == '{% computed.gw_root_id %}' && pathPart == '{{ names.deadman_uri_path }}'].id | [0]
create_method_04 = {cmdline = ["aws", "apigateway", "put-method", "--rest-api-id", "{% computed.rest_api_id %}", "--resource-id", "{% computed.deadman_child_id %}", "--http-method", "POST", "--authorization-type", 'NONE'], capture = []}
associate_lambda_05 = {cmdline = ["aws", "apigateway", "put-integration", "--rest-api-id", "{% computed.rest_api_id %}", "--resource-id", "{% computed.deadman_child_id %}", "--http-method", "POST", "--type", "AWS_PROXY", "--integration-http-method", "POST", "--uri", "arn:aws:apigateway:{% general.awsregion %}:lambda:path/2015-03-31/functions/{% computed.lambda_arn %}/invocations"], capture = []}

check_lambda_policy = {cmdline = ["aws", "lambda", "get-policy", "--function-name", "{{ names.lambda_fun_name }}"], capture = [{dest = 'computed.returned', query = ''}]}

setup_lambda_invoke_perm_06 = {cmdline = ["aws", "lambda", "add-permission", "--function-name", "{{ names.lambda_fun_name }}", "--statement-id", "{{ names.apigateway_lambda_invoke_statement_id }}", "--action", "lambda:InvokeFunction", "--principal", "apigateway.amazonaws.com", "--source-arn", "arn:aws:execute-api:{% general.awsregion %}:{% computed.account_id %}:{% computed.rest_api_id %}/*/*/*"], capture = []}
deploy_apigateway_07 = {cmdline = ["aws", "apigateway", "create-deployment", "--rest-api-id", "{% computed.rest_api_id %}", "--stage-name", "{{ names.apigateway_stage }}"], capture = [{ dest = 'computed.returned', query = '' }]}

[final]
test_lambda_invoke = {cmdline = ["aws", "apigateway", "test-invoke-method", "--rest-api-id", "{% computed.rest_api_id %}", "--resource-id", "{% computed.deadman_child_id %}", "--http-method", "POST", "--path-with-query-string", "/{{ names.deadman_uri_path }}"], capture = [ {dest = 'computed.returned', query = ''}]}

[computed]
