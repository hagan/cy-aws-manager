#!/usr/bin/env bash

## this runs the last make build you ran in project
if [ -z ${PRJ_ROOT_DIR} ]; then
  echo >&2 "ERROR: Cannot run, missing PRJ_ROOT_DIR environment variables"
  exit 1
fi

if [[ -z $MK_AWS_PROFILE ]]; then
  echo >&2 "ERROR: Must set MK_AWS_PROFILE!"
  exit 1
fi

mkstatefile='/tmp/mk-state'

declare _MK_LAST_CMD

if [ -f "${mkstatefile}" ]; then
  read -r _MK_LAST_CMD <"${mkstatefile}"
else
  _MK_LAST_CMD=""
fi

local_registry='no'

# Initialize flags
pynode=false
pulumi=false
awsmgr=false
vice=false
clean=false
rebuild_flask=false
rebuild_node=false

build=true
shell=false
save_args=$@

if [[ $1 != -* ]]; then
  command="$1"
  shift
else
  command=''
fi

parse_long_options() {
  for arg in "$@"; do
    case $arg in
      --rebuild-flask)
        rebuild_flask = true
        ;;
      --rebuild-node)
        rebuild_node = true
        ;;
      --local-registry)
        local_registry = 'yes'
        ;;
      *)
        # Ignore unknown options
        ;;
    esac
  done
}

get_aws_account_id() {
  aws_account_id=$(\
      aws --profile ${MK_AWS_PROFILE} \
      sts get-caller-identity \
        | jq -r .Account \
      || { \
        >&2 echo "ERROR: failed to get AWS Account ID."; \
        exit 1; \
      } \
    )
}

generate_aws_token() {
  aws_account_id=$(\
      aws --profile ${MK_AWS_PROFILE} \
      sts get-caller-identity \
        | jq -r .Account \
      || { \
        >&2 echo "ERROR: failed to get AWS Account ID."; \
        exit 1; \
      } \
    )
    echo "AWS Account ID: ${aws_account_id}"
    # min 900 seconds or 8 hours max?
    if [[ ! -z ${aws_account_id} ]]; then
      aws_output=$(\
        aws --profile ${MK_AWS_PROFILE} sts assume-role \
        --role-arn "arn:aws:iam::${aws_account_id}:role/AWSManagerRole" \
        --role-session-name "AwsManagerRoleSession" \
        --duration-seconds 900\
      )
      AWS_ACCESS_KEY_ID=$(echo ${aws_output} | jq -r '.Credentials.AccessKeyId')
      AWS_SECRET_ACCESS_KEY=$(echo ${aws_output} | jq -r '.Credentials.SecretAccessKey')
      AWS_SESSION_TOKEN=$(echo ${aws_output} | jq -r '.Credentials.SessionToken')
      AWS_SESSION_TOKEN_EXPIRATION=$(echo ${aws_output} | jq -r '.Credentials.Expiration')
      echo "AWS_SESSION_TOKEN_EXPIRATION=$AWS_SESSION_TOKEN_EXPIRATION"
      if [[ -f ${PRJ_ROOT_DIR}/.env ]]; then
        sed -i "s|^AWS_ACCESS_KEY_ID=.*|AWS_ACCESS_KEY_ID='${AWS_ACCESS_KEY_ID}'|" ${PRJ_ROOT_DIR}/.env
        sed -i "s|^AWS_SECRET_ACCESS_KEY=.*|AWS_SECRET_ACCESS_KEY='${AWS_SECRET_ACCESS_KEY}'|" ${PRJ_ROOT_DIR}/.env
        sed -i "s|^AWS_SESSION_TOKEN=.*|AWS_SESSION_TOKEN='${AWS_SESSION_TOKEN}'|" ${PRJ_ROOT_DIR}/.env
        sed -i "s|^AWS_SESSION_TOKEN_EXPIRATION=.*|AWS_SESSION_TOKEN_EXPIRATION='${AWS_SESSION_TOKEN_EXPIRATION}'|" ${PRJ_ROOT_DIR}/.env
      fi
    fi
}

# First, handle long options
parse_long_options "$@"

# Now, handle short options
while getopts "fnsl" opt; do
    case ${opt} in
        f)
            rebuild_flask=true
            ;;
        n)
            rebuild_node=true
            ;;
        s)
            if [[ $command == 'all' ]]; then
              echo >&2 "ERROR: cannot use 'all' with +s"
              exit 1
            fi
            build=false
            shell=true
            ;;
        l)
            local_registry='yes'
            ;;
        *)
            # Handle error: unknown option
            exit 1
            ;;
    esac
done

# Loop through arguments and process them
case $command in
  pynode)
    pynode=true
    pulumi=false
    awsmgr=false
    vice=false
    ;;
  pulumi)
    pynode=false
    pulumi=true
    awsmgr=false
    vice=false
    ;;
  awsmgr)
    pynode=false
    pulumi=false
    awsmgr=true
    vice=false
    ;;
  vice)
    pynode=false
    pulumi=false
    awsmgr=false
    vice=true
    ;;
  clean)
    clean=true
    ;;
  all)
    pynode=true
    pulumi=true
    awsmgr=true
    vice=true
    ;;
  generate-aws-token)
    generate_aws_token
    ;;
  last)
    if [[ -z ${_MK_LAST_CMD} ]]; then
      echo "No last action!"
    else
      # echo "RUNNING $0 ${_MK_LAST_CMD}"
      $0 ${_MK_LAST_CMD}
    fi
    ;;
  '')
    echo "..."
    ;;
  *)
    # Ignore unknown options / handle error
    exit 1
    ;;
esac

echo "rebuild_flask = $rebuild_flask"
echo "rebuild_node = $rebuild_node"
echo "build = $build"
echo "shell = $shell"
echo "local_registry = ${local_registry}"
echo "pynode = $pynode"
echo "pulumi = $pulumi"
echo "awsmgr = $awsmgr"
echo "vice = $vice"

if [[ ${clean} == true ]]; then
  echo "Cleaning things up"
  pushd ${PRJ_ROOT_DIR}
  make clean
  popd
fi

if [[ ( ( ${rebuild_flask} == true ) && ( ${build} == true ) ) ]]; then
  echo "Building flask module"
  pushd ${PRJ_ROOT_DIR}
  make build-flask-app
  popd
  echo "Building flask module complete"
fi

if [[ ( ( ${rebuild_node} == true ) && ( ${build} == true ) ) ]]; then
  echo "Building yarn module"
  pushd ${PRJ_ROOT_DIR}
  make build-node-app
  popd
  echo "Building yarn module complete"
fi

if [[ ( ( ${pynode} == true ) && ( ${build} == true ) ) ]]; then
  echo "Building pynode"
  pushd ${PRJ_ROOT_DIR}
  echo "make SKIPFLASKBUILD='yes' SKIPNODEBUILD='yes' LOCALREGISTRY=\"${local_registry}\" build-pynode-image"
  time make SKIPFLASKBUILD='yes' SKIPNODEBUILD='yes' LOCALREGISTRY="${local_registry}" build-pynode-image
  popd
  echo "pulumi pynode complete"
elif [[ ( ( ${pynode} == true ) && ( ${shell} == true ) ) ]]; then
  pushd ${PRJ_ROOT_DIR}
  make LOCALREGISTRY="${local_registry}" shell-pynode-image
  popd
fi

if [[ ( ( ${pulumi} == true ) && ( ${build} == true ) ) ]]; then
  echo "Building pulumi"
  pushd ${PRJ_ROOT_DIR}
  echo "make SKIPFLASKBUILD='yes' SKIPNODEBUILD='yes' LOCALREGISTRY=\"${local_registry}\" build-pulumi-image"
  time make SKIPFLASKBUILD='yes' SKIPNODEBUILD='yes' LOCALREGISTRY="${local_registry}" build-pulumi-image
  popd
  echo "pulumi build complete"
elif [[ ( ( ${pulumi} == true ) && ( ${shell} == true ) ) ]]; then
  pushd ${PRJ_ROOT_DIR}
  make LOCALREGISTRY="${local_registry}" shell-pulumi-image
  popd
fi

if [[ ( ( ${awsmgr} == true ) && ( ${build} == true ) ) ]]; then
  echo "Building awsmgr"
  pushd ${PRJ_ROOT_DIR}
  echo "make SKIPFLASKBUILD='yes' SKIPNODEBUILD='yes'  LOCALREGISTRY=\"${local_registry}\" build-awsmgr-image"
  time make SKIPFLASKBUILD='yes' SKIPNODEBUILD='yes' LOCALREGISTRY="${local_registry}" build-awsmgr-image
  echo "awsmgr build complete"
  popd
elif [[ ( ( ${awsmgr} == true ) && ( ${shell} == true ) ) ]]; then
  pushd ${PRJ_ROOT_DIR}
  make LOCALREGISTRY="${local_registry}" shell-awsmgr-image
  popd
fi

if [[ ( ( ${vice} == true ) && ( ${build} == true ) ) ]]; then
  echo "Building vice"
  pushd ${PRJ_ROOT_DIR}
  echo "make SKIPFLASKBUILD='yes' SKIPNODEBUILD='yes' LOCALREGISTRY=\"${local_registry}\" build-vice-image"
  time make SKIPFLASKBUILD='yes' SKIPNODEBUILD='yes' LOCALREGISTRY="${local_registry}" build-vice-image
  echo "vice build complete"
  popd
elif [[ ( ( ${vice} == true ) && ( ${shell} == true ) ) ]]; then
  echo "Shelling into vice"
  pushd ${PRJ_ROOT_DIR}
  make LOCALREGISTRY="${local_registry}" shell-vice-image
  popd
fi

if [[ $command != 'last' ]]; then
  printf "%s\n" "${save_args}" >"${mkstatefile}"
fi