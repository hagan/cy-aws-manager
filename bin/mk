#!/usr/bin/env bash


cleanup() {
  popd
}


## this runs the last make build you ran in project
if [ -z ${PRJ_ROOT_DIR} ]; then
  echo >&2 "ERROR: Cannot run, missing PRJ_ROOT_DIR environment variables"
  exit 1
else
  pushd  ${PRJ_ROOT_DIR}
  trap cleanup EXIT
fi

if [[ -z ${AWS_ADMIN_USER} ]]; then
  echo >&2 "ERROR: Must set AWS_ADMIN_USER!"
  exit 1
fi

local_registry='yes'
harbor_tags='no'
docker_tags='no'

# Initialize flags
pynode=false
pulumi=false
awsmgr=false
vice=false
clean=false
rebuild_flask=false
rebuild_node=false
inject=false
skip_auth_check='no'

build=true
shell=false
save_args=$@

_AWSPROFILENAME=

if [[ $1 != -* ]]; then
  command="$1"
  shift
else
  command=''
fi

function show_help() {
  echo """
  -- mk help command--

  mk <COMMAND> <FLAGS>

  COMMANDS
    registry                - create/start local registry
    update                  - Update this repo and submodule
    pynode                  - Build/run the pynode Docker image
    pulumi                  - Build/run the pulumi Docker image
    awsmgr                  - Build/run the awsmgr (base) Docker imge
    vice                    - Build/run the main vice Docker image
    clean                   - Be careful, this may clear all docker cache.
    all                     - Builds pynode, pulumi, awsmgr, vice in order.
    generate-aws-token      - Generate temporary token for aws
    update-key-from-vice    - If vice is running, clones keys and stashes in
                              the .env file.

    iam-1  - Create IAM Policy for S3
    iam-2  - Create IAM Policy for EC2
    iam-3  - Create IAM Policy for VPC
    iam-4  - Create IAM Policy for Lambda
    iam-5  - Create IAM Policy for AssumeRole
    iam-6  - Create IAM Role AWSMgrRole linking policies for S3, EC2, VPC and Lambda
    iam-7  - Generate Temporary Session Token for AWSMgrRole
    test-regen - Regenerate using temporary tokens

  FLAGS
    -f/--rebuild-flask   - Builds flask wheel package in dist for awsmgr/vice images
    -n/--rebuild-node    - Builds NextJS tgz package in dist for awsmgr/vice images
    -s/--shell           - load shell for pynode/pulumi/awsmgrvice ie 'mk pynode -s'
    -h/--harbor-tags     - Push to harbor (only works on vice command)
    -k/--docker-tags     - Push to docker
    -i/--inject          - Inject updatd project
    -a/--skip-auth-check - Skip auth check at startup
    -p/--profile         - AWS profile to use
  """
}


function update_project() {
  if git status --porcelain | grep -q '^[[:space:]]*[AMD]'; then
    echo "ERROR: Can't update project, you have uncommitted changes."
    git status
    exit 1
  else
      echo "git pull"
      git pull && {
        echo "git submodule update --recursive --remote"
        git submodule update --recursive --remote && {
          echo "Updated submodules, check to make sure they're on main branch and pull"
          exit 0
        } || {
          >&2 echo "ERROR: failed to update submodules"
          exit 1
        }
      } || {
        >&2 echo "ERROR: failed to pull!"
        exit 1
      }

  fi
  popd >/dev/null
  exit 0
}

function load_registry() {
  if docker ps -a --format json | jq -r '.Names' | grep -q 'registry' \
    && docker ps -a --format json | jq -r '.State' | grep -q 'running'; then
    exit 0
  elif docker ps -a --format json | jq -r '.Names' | grep -q 'registry'; then
    docker restart registry
  else
    docker run -d -p 5000:5000 --name registry registry:2
  fi
}

function get_aws_account_id() {
  aws_account_id=$(\
    aws \
    sts get-caller-identity $@ | jq -r .Account \
    || { \
      >&2 echo "ERROR: failed to get AWS Account ID."; \
      exit 1; \
    } \
  )
  if [[ $? -ne 0 ]]; then
    >&2 echo "ERROR: did not capture Account ID!"
    exit 1
  fi
  echo "${aws_account_id}"
}

update_keys_from_vice() {
  if ! docker ps --filter "name=vice" | grep vice >/dev/null 2>&1; then
    >&2 echo "ERROR: vice not running!"
    return 1
  fi

  CUR_AWS_ACCESS_KEY_ID=$(cd ${PRJ_ROOT_DIR}; docker ps --filter "name=vice" | grep vice >/dev/null 2>&1 && docker exec -it vice /usr/bin/su --login cyverse -c "bash -i -c 'echo -n \${AWS_ACCESS_KEY_ID}'" | tail -n 1 | tr -d '\n')
  CUR_AWS_SECRET_ACCESS_KEY=$(cd ${PRJ_ROOT_DIR}; docker ps --filter "name=vice" | grep vice >/dev/null 2>&1 && docker exec -it vice /usr/bin/su --login cyverse -c "bash -i -c 'echo -n \${AWS_SECRET_ACCESS_KEY}'" | tail -n 1 | tr -d '\n')
  CUR_AWS_SESSION_TOKEN=$(cd ${PRJ_ROOT_DIR}; docker ps --filter "name=vice" | grep vice >/dev/null 2>&1 && docker exec -it vice /usr/bin/su --login cyverse -c "bash -i -c 'echo -n \${AWS_SESSION_TOKEN}'" | tail -n 1 | tr -d '\n')
  CUR_AWS_CREDENTIAL_EXPIRATION=$(cd ${PRJ_ROOT_DIR}; docker ps --filter "name=vice" | grep vice >/dev/null 2>&1 && docker exec -it vice /usr/bin/su --login cyverse -c "bash -i -c 'echo -n \${AWS_CREDENTIAL_EXPIRATION}'" | tail -n 1 | tr -d '\n')
  echo "AWS_ACCESS_KEY_ID=$CUR_AWS_ACCESS_KEY_ID"
  echo "AWS_CREDENTIAL_EXPIRATION=$CUR_AWS_CREDENTIAL_EXPIRATION"
  if [[ -f ${PRJ_ROOT_DIR}/.env ]]; then
    if ! grep -q "AWS_ACCESS_KEY_ID=" ${PRJ_ROOT_DIR}/.env; then
      echo "AWS_ACCESS_KEY_ID='${CUR_AWS_ACCESS_KEY_ID}'" >> ${PRJ_ROOT_DIR}/.env
    else
      sed -i "s|^AWS_ACCESS_KEY_ID=.*|AWS_ACCESS_KEY_ID='${CUR_AWS_ACCESS_KEY_ID}'|" ${PRJ_ROOT_DIR}/.env
    fi

    if ! grep -q "AWS_SECRET_ACCESS_KEY=" ${PRJ_ROOT_DIR}/.env; then
      echo "AWS_SECRET_ACCESS_KEY='${CUR_AWS_SECRET_ACCESS_KEY}'" >> ${PRJ_ROOT_DIR}/.env
    else
      sed -i "s|^AWS_SECRET_ACCESS_KEY=.*|AWS_SECRET_ACCESS_KEY='${CUR_AWS_SECRET_ACCESS_KEY}'|" ${PRJ_ROOT_DIR}/.env
    fi

    if ! grep -q "AWS_SESSION_TOKEN=" ${PRJ_ROOT_DIR}/.env; then
      echo "AWS_SESSION_TOKEN='${CUR_AWS_SESSION_TOKEN}'" >> ${PRJ_ROOT_DIR}/.env
    else
      sed -i "s|^AWS_SESSION_TOKEN=.*|AWS_SESSION_TOKEN='${CUR_AWS_SESSION_TOKEN}'|" ${PRJ_ROOT_DIR}/.env
    fi

    if ! grep -q "AWS_CREDENTIAL_EXPIRATION=" ${PRJ_ROOT_DIR}/.env; then
      echo "AWS_CREDENTIAL_EXPIRATION='${CUR_AWS_CREDENTIAL_EXPIRATION}'" >> ${PRJ_ROOT_DIR}/.env
    else
      sed -i "s|^AWS_CREDENTIAL_EXPIRATION=.*|AWS_CREDENTIAL_EXPIRATION='${CUR_AWS_CREDENTIAL_EXPIRATION}'|" ${PRJ_ROOT_DIR}/.env
    fi
    # Reload the keys
    source ${PRJ_ROOT_DIR}/.env
  else
    >&2 echo "ERROR: missing ${PRJ_ROOT_DIR}/.env!"
  fi
}


function setup_iam_step_1() {
  STEP_1_FILE="${PRJ_ROOT_DIR}/iam-json-docs/AWSMgrS3Policy.json"
  if [[ ! -f ${STEP_1_FILE} ]]; then
    >&2 echo "ERROR: '${STEP_1_FILE}' is missing!"
    exit 1
  fi
  echo "Creating S3 policy from file '${STEP_1_FILE}'"
  aws iam create-policy --policy-name AWSMgrS3Policy --policy-document file://${STEP_1_FILE} $@
}

function setup_iam_step_2() {
  JSON_FILE="${PRJ_ROOT_DIR}/iam-json-docs/AWSMgrEc2Policy.json"
  if [[ ! -f ${JSON_FILE} ]]; then
    >&2 echo "ERROR: '${JSON_FILE}' is missing!"
    exit 1
  fi
  echo "Creating EC2 policy from file '${JSON_FILE}'"
  aws iam create-policy --policy-name AWSMgrEc2Policy --policy-document file://${JSON_FILE} $@
}

function setup_iam_step_3() {
  JSON_FILE="${PRJ_ROOT_DIR}/iam-json-docs/AWSMgrVPCPolicy.json"
  if [[ ! -f ${JSON_FILE} ]]; then
    >&2 echo "ERROR: '${JSON_FILE}' is missing!"
    exit 1
  fi
  echo "Creating VPC policy from file '${JSON_FILE}'"
  aws iam create-policy --policy-name AWSMgrVPCPolicy --policy-document file://${JSON_FILE} $@
}

function setup_iam_step_4() {
  JSON_FILE="${PRJ_ROOT_DIR}/iam-json-docs/AWSMgrLambdaPolicy.json"
  if [[ ! -f ${JSON_FILE} ]]; then
    >&2 echo "ERROR: '${JSON_FILE}' is missing!"
    exit 1
  fi
  echo "Creating Lambda policy from file '${JSON_FILE}'"
  aws iam create-policy --policy-name AWSMgrLambdaPolicy --policy-document file://${JSON_FILE} $@
}

function setup_iam_step_5() {
  JSON_FILE="${PRJ_ROOT_DIR}/iam-json-docs/AWSMgrAssumeRolePolicy.json"
  TEMP_FILE="${PRJ_ROOT_DIR}/trashbin/temp.json"
  if [[ ! -f ${JSON_FILE} ]]; then
    >&2 echo "ERROR: '${JSON_FILE}' is missing!"
    exit 1
  fi
  if [[ -f ${TEMP_FILE} ]]; then
    >&2 echo "ERROR: '${TEMP_FILE}' exists!"
    exit 1
  fi
  account_id=$(get_aws_account_id $@)
  sed "s/\${account_id}/${account_id}/g" ${JSON_FILE} > ${TEMP_FILE}
  echo "Creating AssumeRole policy from file '${TEMP_FILE}'"
  aws iam create-policy --policy-name AWSMgrAssumeRolePolicy --policy-document file://${TEMP_FILE} $@
  rm ${TEMP_FILE}
}

function setup_iam_step_6() {
  JSON_FILE="${PRJ_ROOT_DIR}/iam-json-docs/AWSMgrRole.json"
  TEMP_FILE="${PRJ_ROOT_DIR}/trashbin/temp.json"
  if [[ ! -f ${JSON_FILE} ]]; then
    >&2 echo "ERROR: '${JSON_FILE}' is missing!"
    exit 1
  fi
  if [[ -f ${TEMP_FILE} ]]; then
    >&2 echo "ERROR: '${TEMP_FILE}' exists!"
    exit 1
  fi
  account_id=$(get_aws_account_id $@)
  sed "s/\${account_id}/${account_id}/g" ${JSON_FILE} > ${TEMP_FILE}
  sed -i "s/\${username}/${AWS_ADMIN_USER}/g" ${TEMP_FILE}
  if [[ ! -f ${TEMP_FILE} ]]; then
    >&2 echo "ERROR: '${TEMP_FILE}' failed to generate temporary json document"
    exit 1
  fi

  aws iam create-role --role-name AWSMgrRole --assume-role-policy-document file://${TEMP_FILE} $@  || exit 1
  aws iam attach-role-policy --role-name AWSMgrRole \
    --policy-arn arn:aws:iam::${account_id}:policy/AWSMgrS3Policy $@ || exit 1
  aws iam attach-role-policy --role-name AWSMgrRole \
    --policy-arn arn:aws:iam::${account_id}:policy/AWSMgrEc2Policy $@ || exit 1
  aws iam attach-role-policy --role-name AWSMgrRole \
    --policy-arn arn:aws:iam::${account_id}:policy/AWSMgrVPCPolicy $@ || exit 1
  aws iam attach-role-policy --role-name AWSMgrRole \
    --policy-arn arn:aws:iam::${account_id}:policy/AWSMgrLambdaPolicy $@ || exit 1
  aws iam attach-role-policy --role-name AWSMgrRole \
    --policy-arn arn:aws:iam::${account_id}:policy/AWSMgrAssumeRolePolicy $@ || exit 1

  rm ${TEMP_FILE}
}

function setup_iam_step_7() {
  account_id=$(get_aws_account_id $@)
  aws_output=$(\
    aws sts assume-role \
      --role-arn "arn:aws:iam::${account_id}:role/AWSMgrRole" \
      --role-session-name "AWSMgrRoleSession" \
      --duration-seconds 900 $@ \
    )
    if [[ $? -ne 0 ]]; then
      >&2 echo "ERROR: issue generating token from STS"
      exit 1
    fi

    AWS_ACCESS_KEY_ID=$(echo ${aws_output} | jq -r '.Credentials.AccessKeyId')
    AWS_SECRET_ACCESS_KEY=$(echo ${aws_output} | jq -r '.Credentials.SecretAccessKey')
    AWS_SESSION_TOKEN=$(echo ${aws_output} | jq -r '.Credentials.SessionToken')
    AWS_CREDENTIAL_EXPIRATION=$(echo ${aws_output} | jq -r '.Credentials.Expiration')
    echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}"
    echo "AWS_CREDENTIAL_EXPIRATION=$AWS_CREDENTIAL_EXPIRATION"
    if [[ -f ${PRJ_ROOT_DIR}/.env ]]; then
      if ! grep -q "AWS_ACCESS_KEY_ID=" ${PRJ_ROOT_DIR}/.env; then
        echo "AWS_ACCESS_KEY_ID='${AWS_ACCESS_KEY_ID}'" >> ${PRJ_ROOT_DIR}/.env
      else
        sed -i "s|^AWS_ACCESS_KEY_ID=.*|AWS_ACCESS_KEY_ID='${AWS_ACCESS_KEY_ID}'|" ${PRJ_ROOT_DIR}/.env
      fi
      if ! grep -q "AWS_SECRET_ACCESS_KEY=" ${PRJ_ROOT_DIR}/.env; then
        echo "AWS_SECRET_ACCESS_KEY='${AWS_SECRET_ACCESS_KEY}'" >> ${PRJ_ROOT_DIR}/.env
      else
        sed -i "s|^AWS_SECRET_ACCESS_KEY=.*|AWS_SECRET_ACCESS_KEY='${AWS_SECRET_ACCESS_KEY}'|" ${PRJ_ROOT_DIR}/.env
      fi
      if ! grep -q "AWS_SESSION_TOKEN=" ${PRJ_ROOT_DIR}/.env; then
        echo "AWS_SESSION_TOKEN='${AWS_SESSION_TOKEN}'" >> ${PRJ_ROOT_DIR}/.env
      else
        sed -i "s|^AWS_SESSION_TOKEN=.*|AWS_SESSION_TOKEN='${AWS_SESSION_TOKEN}'|" ${PRJ_ROOT_DIR}/.env
      fi
      if ! grep -q "AWS_CREDENTIAL_EXPIRATION=" ${PRJ_ROOT_DIR}/.env; then
        echo "AWS_CREDENTIAL_EXPIRATION='${AWS_CREDENTIAL_EXPIRATION}'" >> ${PRJ_ROOT_DIR}/.env
      else
        sed -i "s|^AWS_CREDENTIAL_EXPIRATION=.*|AWS_CREDENTIAL_EXPIRATION='${AWS_CREDENTIAL_EXPIRATION}'|" ${PRJ_ROOT_DIR}/.env
      fi
    else
      >&2 echo "ERROR: missing ${PRJ_ROOT_DIR}/.env!"
    fi
}

function test_regen() {
  account_id=$(get_aws_account_id $@)
  if [[ -f ${PRJ_ROOT_DIR}/.env ]]; then
    source ${PRJ_ROOT_DIR}/.env
  else
    >&2 echo "ERROR: Missing ${PRJ_ROOT_DIR}/.env!"
    exit 1
  fi
  echo "AWS_ACCESS_KEY_ID='${AWS_ACCESS_KEY_ID}'"
  # aws sts assume-role \
  #     --role-arn "arn:aws:iam::${account_id}:role/AWSMgrRole" \
  #     --role-session-name "AWSMgrRoleRoleSession" \
  #     --duration-seconds 900
  aws sts assume-role \
    --role-arn "arn:aws:iam::${account_id}:role/AWSMgrRole" \
    --role-session-name "AWSMgrRoleRoleSession" \
    --duration-seconds 900
}

for arg in "$@"; do
  case $arg in
    --rebuild-flask)
      rebuild_flask=true
      shift
      ;;
    --rebuild-node)
      rebuild_node=true
      shift
      ;;
    --shell)
      valid_commands=("pynode" "pulumi" "awsmgr" "vice")
      found=0
      for cmd in "${valid_commands[@]}"; do
        if [[ "$cmd" == "$command" ]]; then
          found=1
          break
        fi
      done
      if [[ $found -ne 1 ]] && [[ -z $command ]]; then
        >&2 echo "ERROR: must include a command (pynode, pulumi, awsmgr, vice...) with --shell option!"
        exit 1
      elif [[ $found -ne 1 ]] && [[ ! -z $command ]]; then
        echo >&2 "ERROR: cannot run shell with $command"
        exit 1
      fi
      build=false
      shell=true
      shift
      ;;
    --harbor-tags)
      harbor_tags='yes'
      local_registry='no'
      shift
      ;;
    --docker-tags)
      docker_tags='yes'
      local_registry='no'
      shift
      ;;
    --inject)
      inject=true
      shift
      ;;
    --skip-auth-check)
      skip_auth_check='yes'
      shift
      ;;
    --profile=*)
      _AWSPROFILENAME="--profile ${arg#*=}"
      shift
      ;;
    --profile)
      _AWSPROFILENAME="--profile $2"
      shift
      shift
      ;;
  esac
done

# Now, handle short options
while getopts "fnshkiap:" opt; do
    case ${opt} in
        f)
            rebuild_flask=true
            ;;
        n)
            rebuild_node=true
            ;;
        s)
          if [[ $command == 'all' ]]; then
            echo >&2 "ERROR: cannot use 'all' with +s"
            exit 1
          fi
          build=false
          shell=true
          ;;
        h)
          # Harbor push
          harbor_tags='yes'
          local_registry='no'
          ;;
        k)
          ## Docker push
          docker_tags='yes'
          local_registry='no'
          ;;
        i)
          inject=true
          ;;
        a)
          skip_auth_check='yes'
          ;;
        p)
          _AWSPROFILENAME="--profile $OPTARG"
          ;;
        *)
            # Handle error: unknown option
            exit 1
            ;;
    esac
done

# Loop through arguments and process them
case $command in
  help)
    show_help
    ;;
  registry)
    load_registry
    ;;
  update)
    update_project
    ;;
  pynode)
    pynode=true
    pulumi=false
    awsmgr=false
    vice=false
    ;;
  pulumi)
    pynode=false
    pulumi=true
    awsmgr=false
    vice=false
    ;;
  awsmgr)
    pynode=false
    pulumi=false
    awsmgr=true
    vice=false
    ;;
  vice)
    pynode=false
    pulumi=false
    awsmgr=false
    vice=true
    ;;
  clean)
    clean=true
    ;;
  all)
    pynode=true
    pulumi=true
    awsmgr=true
    vice=true
    ;;
  update-key-from-vice)
    update_keys_from_vice
    exit $?
    ;;
  iam-1)
    setup_iam_step_1 "${_AWSPROFILENAME}"
    exit $?
    ;;
  iam-2)
    setup_iam_step_2 "${_AWSPROFILENAME}"
    exit $?
    ;;
  iam-3)
    setup_iam_step_3 "${_AWSPROFILENAME}"
    exit $?
    ;;
  iam-4)
    setup_iam_step_4 "${_AWSPROFILENAME}"
    exit $?
    ;;
  iam-5)
    setup_iam_step_5 "${_AWSPROFILENAME}"
    exit $?
    ;;
  iam-6)
    setup_iam_step_6 "${_AWSPROFILENAME}"
    exit $?
    ;;
  "iam-7"|"generate-aws-token")
    setup_iam_step_7 "${_AWSPROFILENAME}"
    exit $?
    ;;
  test-regen)
    test_regen "${_AWSPROFILENAME}"
    exit $?
    ;;
  '')
    echo "..."
    ;;
  *)
    # Ignore unknown options / handle error
    exit 1
    ;;
esac

# echo "rebuild_flask = $rebuild_flask"
# echo "rebuild_node = $rebuild_node"
# echo "inject = $inject"
# echo "build = $build"
# echo "shell = $shell"
# echo "local_registry = ${local_registry}"
# echo "harbor_tags = ${harbor_tags}"
# echo "docker_tags = ${docker_tags}"
# echo "pynode = $pynode"
# echo "pulumi = $pulumi"
# echo "awsmgr = $awsmgr"
# echo "vice = $vice"

if [[ ${clean} == true ]]; then
  echo "Cleaning things up"
  make clean
fi

# if no -f or -n flag, but -i (just inject)
if [[ ( ( ${rebuild_flask} == false ) && ( ${rebuild_node} == false ) && ( $inject == true ) ) ]]; then
  echo "Injecting Flask into running docker project"
  make SKIPFLASKBUILD=yes reload-vice-flask-app
  echo "Injecting NextJS into running docker project"
  make SKIPNODEBUILD=yes reload-vice-node-app
fi

if [[ ( ( ${rebuild_flask} == true ) && ( ${build} == true ) ) ]]; then
  echo "Building flask module"
  make build-flask-app
  echo "Building flask module complete"
  if [[ $inject == true ]]; then
    echo "Injecting Flask into running docker project"
    make SKIPFLASKBUILD=yes reload-vice-flask-app
  fi
fi

if [[ ( ( ${rebuild_node} == true ) && ( ${build} == true ) ) ]]; then
  echo "Building yarn module"
  make build-node-app
  echo "Building yarn module complete"
  if [[ $inject == true ]]; then
    echo "Injecting NextJS into running docker project"
    make SKIPNODEBUILD=yes reload-vice-node-app
  fi
fi

if [[ ( ( ${pynode} == true ) && ( ${build} == true ) ) ]]; then
  echo "Building pynode"
  echo "make SKIPFLASKBUILD='yes' SKIPNODEBUILD='yes' LOCALREGISTRY=\"${local_registry}\" build-pynode-image"
  time make SKIPFLASKBUILD='yes' SKIPNODEBUILD='yes' LOCALREGISTRY="${local_registry}" DOCKERREGISTRY="${docker_tags}" build-pynode-image
  echo "pulumi pynode complete"
elif [[ ( ( ${pynode} == true ) && ( ${shell} == true ) ) ]]; then
  make shell-pynode-image
fi

if [[ ( ( ${pulumi} == true ) && ( ${build} == true ) ) ]]; then
  echo "Building pulumi"
  echo "make SKIPFLASKBUILD='yes' SKIPNODEBUILD='yes' LOCALREGISTRY=\"${local_registry}\" build-pulumi-image"
  time make SKIPFLASKBUILD='yes' SKIPNODEBUILD='yes' LOCALREGISTRY="${local_registry}" DOCKERREGISTRY="${docker_tags}" build-pulumi-image
  echo "pulumi build complete"
elif [[ ( ( ${pulumi} == true ) && ( ${shell} == true ) ) ]]; then
  make shell-pulumi-image
fi

if [[ ( ( ${awsmgr} == true ) && ( ${build} == true ) ) ]]; then
  echo "Building awsmgr"
  echo "make SKIPFLASKBUILD='yes' SKIPNODEBUILD='yes'  LOCALREGISTRY=\"${local_registry}\" build-awsmgr-image"
  time make SKIPFLASKBUILD='yes' SKIPNODEBUILD='yes' LOCALREGISTRY="${local_registry}" DOCKERREGISTRY="${docker_tags}" build-awsmgr-image
  echo "awsmgr build complete"
elif [[ ( ( ${awsmgr} == true ) && ( ${shell} == true ) ) ]]; then
  make shell-awsmgr-image
fi

if [[ ( ( ${vice} == true ) && ( ${build} == true ) ) ]]; then
  echo "Building vice"
  echo "make SKIPFLASKBUILD='yes' SKIPNODEBUILD='yes' LOCALREGISTRY=\"${local_registry}\" build-vice-image"
  time make SKIPFLASKBUILD='yes' SKIPNODEBUILD='yes' LOCALREGISTRY="${local_registry}" DOCKERREGISTRY="${docker_tags}" HARBORREGISTRY="${harbor_tags}" build-vice-image
  echo "vice build complete"
elif [[ ( ( ${vice} == true ) && ( ${shell} == true ) ) ]]; then
  echo "Shelling into vice"
  make SKIPAWSAUTH=${skip_auth_check} shell-vice-image
fi
